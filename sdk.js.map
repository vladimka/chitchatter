{"mappings":"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","sources":["<anon>","sdk/sdk.ts","src/models/sdk.ts","src/models/shell.ts","src/models/settings.ts","src/config/iframeFeatureAllowList.ts"],"sourcesContent":["(function () {\nvar $6ed8c3ab711979dd$export$31b89492673a65b7;\n(function(QueryParamKeys) {\n    QueryParamKeys[\"GET_SDK_CONFIG\"] = \"getSdkConfig\";\n    QueryParamKeys[\"IS_EMBEDDED\"] = \"embed\";\n    QueryParamKeys[\"PARENT_DOMAIN\"] = \"parentDomain\";\n})($6ed8c3ab711979dd$export$31b89492673a65b7 || ($6ed8c3ab711979dd$export$31b89492673a65b7 = {}));\n\n\nvar $a0ddda2ee5b9b5ef$export$8b7939210dfb437e;\n(function(PostMessageEventName) {\n    PostMessageEventName[\"CONFIG\"] = \"config\";\n    PostMessageEventName[\"CONFIG_REQUESTED\"] = \"configRequested\";\n})($a0ddda2ee5b9b5ef$export$8b7939210dfb437e || ($a0ddda2ee5b9b5ef$export$8b7939210dfb437e = {}));\nvar $a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba;\n(function(ChatEmbedAttributes) {\n    ChatEmbedAttributes[\"COLOR_MODE\"] = \"color-mode\";\n    ChatEmbedAttributes[\"PLAY_MESSAGE_SOUND\"] = \"play-message-sound\";\n    ChatEmbedAttributes[\"ROOM_NAME\"] = \"room\";\n    ChatEmbedAttributes[\"ROOT_URL\"] = \"root-url\";\n    ChatEmbedAttributes[\"USER_ID\"] = \"user-id\";\n    ChatEmbedAttributes[\"USER_NAME\"] = \"user-name\";\n})($a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba || ($a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba = {}));\nconst $a0ddda2ee5b9b5ef$export$c39407add348bd7b = (event)=>{\n    const { data: data } = event;\n    if (typeof data !== \"object\" || data === null) return false;\n    if (!(\"name\" in data && typeof data.name === \"string\")) return false;\n    if (!(\"payload\" in data && typeof data.payload === \"object\")) return false;\n    return true;\n};\nconst $a0ddda2ee5b9b5ef$export$fea1bdd0b083918d = (event)=>{\n    const queryParams = new URLSearchParams(window.location.search);\n    const parentDomain = queryParams.get((0, $6ed8c3ab711979dd$export$31b89492673a65b7).PARENT_DOMAIN);\n    if (parentDomain === null) return false;\n    const { origin: parentFrameOrigin } = new URL(decodeURIComponent(parentDomain));\n    if (event.origin !== parentFrameOrigin) return false;\n    if (!$a0ddda2ee5b9b5ef$export$c39407add348bd7b(event)) return false;\n    if (event.data.name !== \"config\") return false;\n    return true;\n};\n\n\n\nvar $3c50f495607e7765$export$e9cc541a1d84538e;\n(function(ColorMode) {\n    ColorMode[\"DARK\"] = \"dark\";\n    ColorMode[\"LIGHT\"] = \"light\";\n})($3c50f495607e7765$export$e9cc541a1d84538e || ($3c50f495607e7765$export$e9cc541a1d84538e = {}));\nconst $3c50f495607e7765$var$ColorModeValueStrings = Object.values($3c50f495607e7765$export$e9cc541a1d84538e).map(String);\nconst $3c50f495607e7765$export$4a14e169b1de4ee7 = (color)=>{\n    return $3c50f495607e7765$var$ColorModeValueStrings.includes(color);\n};\n\n\nconst $5c69e7429e468bb9$export$ee741f9227bc3a7d = [\n    \"camera\",\n    \"microphone\",\n    \"display-capture\",\n    \"fullscreen\"\n];\n\n\nconst $df18d55434a2a3da$export$3c7d50e43cfef2 = \"https://chitchatter.im/\";\n// NOTE: This is a subset of standard iframe attributes:\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attributes\nconst $df18d55434a2a3da$var$iframeAttributes = [\n    \"height\",\n    \"referrerpolicy\",\n    \"sandbox\",\n    \"style\",\n    \"width\"\n];\nconst $df18d55434a2a3da$var$configRequestTimeout = 10000;\nclass $df18d55434a2a3da$var$ChatEmbed extends HTMLElement {\n    static get observedAttributes() {\n        const chatAttributes = Object.values((0, $a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba));\n        return [\n            ...chatAttributes,\n            ...$df18d55434a2a3da$var$iframeAttributes\n        ];\n    }\n    get chatConfig() {\n        const chatConfig = {};\n        var _this_getAttribute;\n        if (this.hasAttribute((0, $a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba).USER_ID)) chatConfig.userId = (_this_getAttribute = this.getAttribute((0, $a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba).USER_ID)) !== null && _this_getAttribute !== void 0 ? _this_getAttribute : \"\";\n        if (this.hasAttribute((0, $a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba).USER_NAME)) chatConfig.customUsername = this.getAttribute((0, $a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba).USER_NAME);\n        chatConfig.playSoundOnNewMessage = Boolean(this.hasAttribute((0, $a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba).PLAY_MESSAGE_SOUND));\n        var _this_getAttribute1;\n        const colorMode = (_this_getAttribute1 = this.getAttribute((0, $a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba).COLOR_MODE)) !== null && _this_getAttribute1 !== void 0 ? _this_getAttribute1 : \"\";\n        if ((0, $3c50f495607e7765$export$4a14e169b1de4ee7)(colorMode)) chatConfig.colorMode = colorMode;\n        return chatConfig;\n    }\n    get rootUrl() {\n        var _this_getAttribute;\n        return (_this_getAttribute = this.getAttribute((0, $a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba).ROOT_URL)) !== null && _this_getAttribute !== void 0 ? _this_getAttribute : $df18d55434a2a3da$export$3c7d50e43cfef2;\n    }\n    async listenForConfigRequest() {\n        // NOTE: This cancels any pending config request listeners\n        this.stopListeningForConfigRequest();\n        window.addEventListener(\"message\", this.handleConfigRequestedMessage);\n        this.configRequestExpirationTimout = setTimeout(()=>{\n            console.error(`[chitchatter-sdk] configuration was not sent successfully`);\n            this.stopListeningForConfigRequest();\n        }, $df18d55434a2a3da$var$configRequestTimeout);\n    }\n    updateIframeAttributes() {\n        const { iframe: iframe } = this;\n        var _this_getAttribute;\n        const roomName = encodeURIComponent((_this_getAttribute = this.getAttribute((0, $a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba).ROOM_NAME)) !== null && _this_getAttribute !== void 0 ? _this_getAttribute : window.location.href);\n        const urlParams = new URLSearchParams({\n            [(0, $6ed8c3ab711979dd$export$31b89492673a65b7).IS_EMBEDDED]: \"\",\n            [(0, $6ed8c3ab711979dd$export$31b89492673a65b7).GET_SDK_CONFIG]: \"\",\n            [(0, $6ed8c3ab711979dd$export$31b89492673a65b7).PARENT_DOMAIN]: encodeURIComponent(window.location.origin)\n        });\n        const iframeSrc = new URL(this.rootUrl);\n        iframeSrc.pathname = `public/${roomName}`;\n        iframeSrc.search = urlParams.toString();\n        const { href: src } = iframeSrc;\n        // NOTE: Only update src if the value has changed to avoid reloading the\n        // iframe unnecessarily.\n        if (src !== iframe.getAttribute(\"src\")) iframe.setAttribute(\"src\", src);\n        for (let attributeName of $df18d55434a2a3da$var$iframeAttributes){\n            const attributeValue = this.getAttribute(attributeName);\n            if (attributeValue !== null) iframe.setAttribute(attributeName, attributeValue);\n        }\n    }\n    connectedCallback() {\n        const shadow = this.attachShadow({\n            mode: \"open\"\n        });\n        const { iframe: iframe } = this;\n        iframe.style.border = \"none\";\n        iframe.setAttribute(\"allow\", (0, $5c69e7429e468bb9$export$ee741f9227bc3a7d).join(\";\"));\n        shadow.appendChild(iframe);\n        iframe.addEventListener(\"load\", ()=>{\n            this.listenForConfigRequest();\n        });\n    }\n    disconnectedCallback() {\n        this.stopListeningForConfigRequest();\n    }\n    attributeChangedCallback(name) {\n        this.updateIframeAttributes();\n        const isChatEmbedAttribute = Object.values((0, $a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba)).map(String) // NOTE: Needed to avoid type warnings.\n        .includes(name);\n        if (isChatEmbedAttribute) this.sendConfigToChat();\n    }\n    constructor(...args){\n        super(...args);\n        this.configRequestExpirationTimout = null;\n        this.iframe = document.createElement(\"iframe\");\n        this.sendConfigToChat = ()=>{\n            var _iframe_contentWindow;\n            const { iframe: iframe, rootUrl: rootUrl } = this;\n            const { origin: rootUrlOrigin } = new URL(rootUrl);\n            const postMessageEventData = {\n                name: (0, $a0ddda2ee5b9b5ef$export$8b7939210dfb437e).CONFIG,\n                payload: this.chatConfig\n            };\n            (_iframe_contentWindow = iframe.contentWindow) === null || _iframe_contentWindow === void 0 ? void 0 : _iframe_contentWindow.postMessage(postMessageEventData, rootUrlOrigin);\n        };\n        this.handleConfigRequestedMessage = (event)=>{\n            const { rootUrl: rootUrl } = this;\n            const { origin: rootUrlOrigin } = new URL(rootUrl);\n            if (rootUrlOrigin !== event.origin) return;\n            if (!(0, $a0ddda2ee5b9b5ef$export$c39407add348bd7b)(event)) return;\n            if (event.data.name !== (0, $a0ddda2ee5b9b5ef$export$8b7939210dfb437e).CONFIG_REQUESTED) return;\n            this.sendConfigToChat();\n            this.stopListeningForConfigRequest();\n        };\n        this.stopListeningForConfigRequest = ()=>{\n            window.removeEventListener(\"message\", this.handleConfigRequestedMessage);\n            if (this.configRequestExpirationTimout !== null) {\n                clearInterval(this.configRequestExpirationTimout);\n                this.configRequestExpirationTimout = null;\n            }\n        };\n    }\n}\nwindow.customElements.define(\"chat-room\", $df18d55434a2a3da$var$ChatEmbed);\n\n})();\n//# sourceMappingURL=sdk.js.map\n","import {\n  ChatEmbedAttributes,\n  PostMessageEvent,\n  PostMessageEventName,\n  isPostMessageEvent,\n} from '../src/models/sdk'\nimport { QueryParamKeys } from '../src/models/shell'\nimport { isColorMode, UserSettings } from '../src/models/settings'\nimport { iframeFeatureAllowList } from '../src/config/iframeFeatureAllowList'\n\nexport const defaultRoot = 'https://chitchatter.im/'\n\n// NOTE: This is a subset of standard iframe attributes:\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attributes\nconst iframeAttributes = [\n  'height',\n  'referrerpolicy',\n  'sandbox',\n  'style',\n  'width',\n]\n\nconst configRequestTimeout = 10_000\n\nclass ChatEmbed extends HTMLElement {\n  private configRequestExpirationTimout: NodeJS.Timeout | null = null\n\n  private iframe = document.createElement('iframe')\n\n  static get observedAttributes() {\n    const chatAttributes = Object.values(ChatEmbedAttributes)\n\n    return [...chatAttributes, ...iframeAttributes]\n  }\n\n  get chatConfig() {\n    const chatConfig: Partial<UserSettings> = {}\n\n    if (this.hasAttribute(ChatEmbedAttributes.USER_ID)) {\n      chatConfig.userId = this.getAttribute(ChatEmbedAttributes.USER_ID) ?? ''\n    }\n\n    if (this.hasAttribute(ChatEmbedAttributes.USER_NAME)) {\n      chatConfig.customUsername = this.getAttribute(\n        ChatEmbedAttributes.USER_NAME\n      )!\n    }\n\n    chatConfig.playSoundOnNewMessage = Boolean(\n      this.hasAttribute(ChatEmbedAttributes.PLAY_MESSAGE_SOUND)\n    )\n\n    const colorMode = this.getAttribute(ChatEmbedAttributes.COLOR_MODE) ?? ''\n\n    if (isColorMode(colorMode)) {\n      chatConfig.colorMode = colorMode\n    }\n\n    return chatConfig\n  }\n\n  get rootUrl() {\n    return this.getAttribute(ChatEmbedAttributes.ROOT_URL) ?? defaultRoot\n  }\n\n  private sendConfigToChat = () => {\n    const { iframe, rootUrl } = this\n    const { origin: rootUrlOrigin } = new URL(rootUrl)\n\n    const postMessageEventData: PostMessageEvent['data'] = {\n      name: PostMessageEventName.CONFIG,\n      payload: this.chatConfig,\n    }\n\n    iframe.contentWindow?.postMessage(postMessageEventData, rootUrlOrigin)\n  }\n\n  private handleConfigRequestedMessage = (event: MessageEvent) => {\n    const { rootUrl } = this\n    const { origin: rootUrlOrigin } = new URL(rootUrl)\n\n    if (rootUrlOrigin !== event.origin) return\n    if (!isPostMessageEvent(event)) return\n    if (event.data.name !== PostMessageEventName.CONFIG_REQUESTED) return\n\n    this.sendConfigToChat()\n    this.stopListeningForConfigRequest()\n  }\n\n  private stopListeningForConfigRequest = () => {\n    window.removeEventListener('message', this.handleConfigRequestedMessage)\n\n    if (this.configRequestExpirationTimout !== null) {\n      clearInterval(this.configRequestExpirationTimout)\n      this.configRequestExpirationTimout = null\n    }\n  }\n\n  private async listenForConfigRequest() {\n    // NOTE: This cancels any pending config request listeners\n    this.stopListeningForConfigRequest()\n\n    window.addEventListener('message', this.handleConfigRequestedMessage)\n\n    this.configRequestExpirationTimout = setTimeout(() => {\n      console.error(`[chitchatter-sdk] configuration was not sent successfully`)\n      this.stopListeningForConfigRequest()\n    }, configRequestTimeout)\n  }\n\n  private updateIframeAttributes() {\n    const { iframe } = this\n\n    const roomName = encodeURIComponent(\n      this.getAttribute(ChatEmbedAttributes.ROOM_NAME) ?? window.location.href\n    )\n\n    const urlParams = new URLSearchParams({\n      [QueryParamKeys.IS_EMBEDDED]: '',\n      [QueryParamKeys.GET_SDK_CONFIG]: '',\n      [QueryParamKeys.PARENT_DOMAIN]: encodeURIComponent(\n        window.location.origin\n      ),\n    })\n\n    const iframeSrc = new URL(this.rootUrl)\n    iframeSrc.pathname = `public/${roomName}`\n    iframeSrc.search = urlParams.toString()\n    const { href: src } = iframeSrc\n\n    // NOTE: Only update src if the value has changed to avoid reloading the\n    // iframe unnecessarily.\n    if (src !== iframe.getAttribute('src')) {\n      iframe.setAttribute('src', src)\n    }\n\n    for (let attributeName of iframeAttributes) {\n      const attributeValue = this.getAttribute(attributeName)\n\n      if (attributeValue !== null) {\n        iframe.setAttribute(attributeName, attributeValue)\n      }\n    }\n  }\n\n  connectedCallback() {\n    const shadow = this.attachShadow({ mode: 'open' })\n    const { iframe } = this\n\n    iframe.style.border = 'none'\n    iframe.setAttribute('allow', iframeFeatureAllowList.join(';'))\n    shadow.appendChild(iframe)\n\n    iframe.addEventListener('load', () => {\n      this.listenForConfigRequest()\n    })\n  }\n\n  disconnectedCallback() {\n    this.stopListeningForConfigRequest()\n  }\n\n  attributeChangedCallback(name: string) {\n    this.updateIframeAttributes()\n\n    const isChatEmbedAttribute = Object.values(ChatEmbedAttributes)\n      .map(String) // NOTE: Needed to avoid type warnings.\n      .includes(name)\n\n    if (isChatEmbedAttribute) {\n      this.sendConfigToChat()\n    }\n  }\n}\n\nwindow.customElements.define('chat-room', ChatEmbed)\n","import { UserSettings } from 'models/settings'\nimport { QueryParamKeys } from 'models/shell'\n\nexport enum PostMessageEventName {\n  CONFIG = 'config',\n  CONFIG_REQUESTED = 'configRequested',\n}\n\nexport enum ChatEmbedAttributes {\n  COLOR_MODE = 'color-mode',\n  PLAY_MESSAGE_SOUND = 'play-message-sound',\n  ROOM_NAME = 'room',\n  ROOT_URL = 'root-url',\n  USER_ID = 'user-id',\n  USER_NAME = 'user-name',\n}\n\nexport interface PostMessageEvent extends MessageEvent {\n  data: {\n    name: PostMessageEventName\n    payload: Record<string, any>\n  }\n}\n\nexport interface ConfigMessageEvent extends PostMessageEvent {\n  data: {\n    name: PostMessageEventName.CONFIG\n    payload: Partial<UserSettings>\n  }\n}\n\nexport const isPostMessageEvent = (\n  event: MessageEvent\n): event is PostMessageEvent => {\n  const { data } = event\n\n  if (typeof data !== 'object' || data === null) return false\n  if (!('name' in data && typeof data.name === 'string')) return false\n  if (!('payload' in data && typeof data.payload === 'object')) return false\n\n  return true\n}\n\nexport const isConfigMessageEvent = (\n  event: MessageEvent\n): event is ConfigMessageEvent => {\n  const queryParams = new URLSearchParams(window.location.search)\n  const parentDomain = queryParams.get(QueryParamKeys.PARENT_DOMAIN)\n\n  if (parentDomain === null) return false\n\n  const { origin: parentFrameOrigin } = new URL(\n    decodeURIComponent(parentDomain)\n  )\n\n  if (event.origin !== parentFrameOrigin) return false\n  if (!isPostMessageEvent(event)) return false\n  if (event.data.name !== PostMessageEventName.CONFIG) return false\n\n  return true\n}\n","import { AlertProps } from '@mui/material/Alert'\n\nexport type AlertOptions = Pick<AlertProps, 'severity'>\n\nexport enum QueryParamKeys {\n  GET_SDK_CONFIG = 'getSdkConfig',\n  IS_EMBEDDED = 'embed',\n  PARENT_DOMAIN = 'parentDomain',\n}\n","export enum ColorMode {\n  DARK = 'dark',\n  LIGHT = 'light',\n}\n\nconst ColorModeValueStrings = Object.values(ColorMode).map(String)\n\nexport const isColorMode = (color: string): color is ColorMode => {\n  return ColorModeValueStrings.includes(color)\n}\n\nexport interface UserSettings {\n  colorMode: ColorMode\n  userId: string\n  customUsername: string\n  playSoundOnNewMessage: boolean\n  showNotificationOnNewMessage: boolean\n  showActiveTypingStatus: boolean\n  publicKey: CryptoKeyPair['publicKey']\n  privateKey: CryptoKeyPair['privateKey']\n}\n","export const iframeFeatureAllowList = [\n  'camera',\n  'microphone',\n  'display-capture',\n  'fullscreen',\n]\n"],"names":["$6ed8c3ab711979dd$export$31b89492673a65b7","$a0ddda2ee5b9b5ef$export$8b7939210dfb437e","$a0ddda2ee5b9b5ef$export$ce054ddf7dff58ba","$3c50f495607e7765$export$e9cc541a1d84538e","QueryParamKeys","PostMessageEventName","ChatEmbedAttributes","ColorMode","$a0ddda2ee5b9b5ef$export$c39407add348bd7b","event","data","name","payload","$3c50f495607e7765$var$ColorModeValueStrings","Object","values","map","String","$3c50f495607e7765$export$4a14e169b1de4ee7","color","includes","$5c69e7429e468bb9$export$ee741f9227bc3a7d","$df18d55434a2a3da$var$iframeAttributes","$df18d55434a2a3da$var$ChatEmbed","HTMLElement","observedAttributes","chatConfig","_this_getAttribute","_this_getAttribute1","hasAttribute","USER_ID","userId","getAttribute","USER_NAME","customUsername","playSoundOnNewMessage","Boolean","PLAY_MESSAGE_SOUND","colorMode","COLOR_MODE","rootUrl","ROOT_URL","listenForConfigRequest","stopListeningForConfigRequest","window","addEventListener","handleConfigRequestedMessage","configRequestExpirationTimout","setTimeout","console","error","updateIframeAttributes","iframe","roomName","encodeURIComponent","ROOM_NAME","location","href","urlParams","URLSearchParams","IS_EMBEDDED","GET_SDK_CONFIG","PARENT_DOMAIN","origin","iframeSrc","URL","pathname","search","toString","src","attributeName","setAttribute","attributeValue","connectedCallback","shadow","attachShadow","mode","style","border","join","appendChild","disconnectedCallback","attributeChangedCallback","sendConfigToChat","constructor","args","document","createElement","_iframe_contentWindow","rootUrlOrigin","postMessageEventData","CONFIG","contentWindow","postMessage","CONFIG_REQUESTED","removeEventListener","clearInterval","customElements","define"],"version":3,"file":"sdk.js.map"}